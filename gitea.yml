- name: "Setup Gitea"
  hosts: all
  vars_files:
    - vars.yml
  tasks:

    - name: "Set Gitea Kube Context"
      set_fact:
        gitea_k8s_context: "{{ item.key }}"
      loop: "{{ lookup('dict', minikube_profiles ) }}"
      loop_control:
         label: "{{ item.key }}"
      when: item.key == 'mgmt'
      tags:
        - gitea
        - gitea-gloo

    - name: "Gitea Kube Context"
      debug:
        var: gitea_k8s_context
      tags:
        - gitea
        - gitea-gloo

    - fail:
        msg: "Gitea Kube Context is not defined"
      when: gitea_k8s_context is not defined 
      tags:
        - gitea
        - gitea-gloo
    
    - name: "Ensure we are in mgmt context"
      ansible.builtin.command:
        argv:
          - kubectl 
          - config 
          - use-context
          - "{{ gitea_k8s_context }}"
      environment:
        KUBECONFIG: "{{ work_dir }}/.kube/config"
      tags:
        - gitea
        - gitea-gloo
    
    - name: "Create gitea admin user"
      set_fact:
        gitea_admin_user:
          username: 'gitea'
          password: "{{ lookup('password', work_dir + '/gitea.password chars=ascii_letters,digits,punctuation') }}"
          email: 'gitea@example.com'
      tags:
        - gitea
    

    # - debug:
    #     var: gitea_admin_user
    #   tags:
    #     - gitea

    - name: "Add Gitea Helm Repo"
      kubernetes.core.helm_repository:
        name: gitea-charts
        repo_url: "https://dl.gitea.io/charts/"
      tags:
        - gitea

    - name: "Query Gitea Versions"
      ansible.builtin.command:
        argv:
          - helm
          - search 
          - repo
          - gitea-charts/gitea
          - -ojson
      register: gitea_version_info
      changed_when: false
      when: gitea_version is not defined
      tags:
        - gitea

    - name: "Fail when version Gitea info does not exist"
      fail:
        msg: "Gitea Version not available"
      when: gitea_version is not defined and gitea_version_info.stdout is not defined
      tags:
        - gitea

    - name: "Set Gitea Version"
      set_fact:
        gitea_version: "{{ gitea_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
      when: gitea_version is not defined
      tags:
        - gitea

    - name: "Gitea Version"
      debug: 
        var: gitea_version
      tags:
        - gitea
    
    - name: "Generate Gitea config"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/gitea/gitea-values.yaml.j2"
        dest: "{{ work_dir }}/gitea-values.yaml"
      tags:
        - gitea

    - name: "Deploy Gitea"
      kubernetes.core.helm:
        release_name: gitea
        chart_ref: gitea-charts/gitea
        release_namespace: gitea
        create_namespace: yes
        chart_version: "{{ gitea_version }}"
        values_files:
           - "{{ work_dir }}/gitea-values.yaml"
        update_repo_cache: yes
        context: "{{ gitea_k8s_context }}"
        wait: yes
      tags:
        - gitea

# Repo Configuration

# Setup Gitea for external access
 
    - name: "Add Gloo Edge Community Repo"
      kubernetes.core.helm_repository:
        name: gloo
        repo_url: "https://storage.googleapis.com/solo-public-helm"
      tags:
        - gitea-gloo

    - name: "Query Gloo Versions"
      ansible.builtin.command:
        argv:
          - helm
          - search 
          - repo
          - gloo/gloo
          - -ojson
      register: gloo_version_info
      changed_when: false
      when: gloo_version is not defined
      tags:
        - gitea-gloo

    - name: "Fail when version gloo info does not exist"
      fail:
        msg: "Gloo Version not available"
      when: gloo_version is not defined and gloo_version_info.stdout is not defined
      tags:
        - gitea-gloo

    - name: "Set Gloo Version"
      set_fact:
        gloo_version: "{{ gloo_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
      when: gloo_version is not defined
      tags:
        - gitea-gloo

    - name: "Gloo Version"
      debug: 
        var: gloo_version
      tags:
        - gitea-gloo

    - name: "Deploy Gloo"
      kubernetes.core.helm:
        release_name: gloo
        chart_ref: gloo/gloo
        release_namespace: gitea
        create_namespace: yes
        chart_version: "{{ gloo_version }}"
        values:
          discovery:
            enabled: false
            fdsMode: DISABLED
          settings:
            writeNamespace: gitea
            watchNamespace: gitea
        update_repo_cache: yes
        context: "{{ gitea_k8s_context }}"
        wait: yes
      tags:
        - gitea-gloo

    - name: "Get Gloo Proxy HTTP Address"
      kubernetes.core.k8s_info:
        kind: Service
        name:  gateway-proxy
        namespace: gitea
        context: "{{ gitea_k8s_context }}"
      register: gatewway_proxy_http_svc_result
      tags:
        - gitea-gloo
    
    - name: "Set Gitea Gloo Facts"
      set_fact:
        gloo_http_lb_ip: "{{ gatewway_proxy_http_svc_result.resources[0] | community.general.json_query(svcQuery) | first  }}"
        gloo_nip_io: "gitea-{{ gatewway_proxy_http_svc_result.resources[0] | community.general.json_query(svcQuery) | first  }}.nip.io"
      vars:
        svcQuery: 'status.loadBalancer.ingress[*].ip'
      tags:
        - gitea-gloo

    - name: 'Create SSL Dir'
      file:
        path: "{{ work_dir}}/ssl/private"
        state: directory
        recurse: yes
      tags:
        - gitea-gloo

    - name: "Generate Gitea CSR Privatekey"
      community.crypto.openssl_privatekey:
        path: "{{ work_dir}}/ssl/private/gitea-privkey.pem"
      tags:
        - gitea-gloo
         
    - name: "Generate an Gitea OpenSSL CSR"
      community.crypto.openssl_csr:
        path: "{{ work_dir}}/ssl/gitea.csr"
        privatekey_path: "{{ work_dir}}/ssl/private/gitea-privkey.pem"
        common_name: "{{ gloo_nip_io }}"
        subject_alt_name:
           - "IP:{{ gloo_http_lb_ip }}"
           - "DNS:{{ gloo_nip_io }}"
      tags:
        - gitea-gloo
        
    - name: "Generate Gitea Self Signed OpenSSL certificate"
      community.crypto.x509_certificate:
        path: "{{ gitea_tls_cert_path }}"
        privatekey_path: "{{ work_dir}}/ssl/private/gitea-privkey.pem"
        csr_path: "{{ work_dir}}/ssl/gitea.csr"
        provider: selfsigned
      tags:
        - gitea-gloo

    - name: "Slurp Gitea Certificate"
      ansible.builtin.slurp:
        src: "{{ gitea_tls_cert_path }}"
      register: gitea_tls_cert_b64
      tags:
        - gitea-gloo

    - name: "Slurp Gitea private key"
      ansible.builtin.slurp:
        src: "{{ work_dir}}/ssl/private/gitea-privkey.pem"
      register: gitea_tls_key_b64
      tags:
        - gitea-gloo

    - name: "Create Gitea SSL Secret"
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitea-upstream-tls
            namespace: gitea
          type: kubernetes.io/tls
          data:
            tls.key: "{{ gitea_tls_key_b64['content'] }}"
            tls.crt: "{{ gitea_tls_cert_b64['content'] }}"
      tags:
        - gitea-gloo

    - name: "Create/Update Gitea Upstream and Route"
      kubernetes.core.k8s:
        template: 
          - path: "{{ playbook_dir }}/templates/gitea/gitea-upstream.yaml.j2"
          - path: "{{ playbook_dir }}/templates/gitea/gitea-virtual-service.yaml.j2"
        context: "{{ gitea_k8s_context }}"
        namespace: gitea
        state: present
      tags:
        - gitea-gloo
