{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"As part of this short tutorial/demo we will be deploying a simple colored hello world microservice and explore how to integrate the service running on an on-premise VM with public cloud clusters using Istio. We will also leverage Gloo Mesh federation capabilites to unify the Istio clusters to provide better interoprablity between the clusters and VM. What we wil be doing as part of this demo ? \u00b6 Setup Kubernetes clusters on three public clouds Setup Virutal Machine on on-premise network Site-to-Site VPN to connect on-premise to public cloud Deploy Gloo Mesh Enterprise on clusters Deploy Istio on clusters Deploy Istio sidecar on VM Traffic Distribution between VM on-premise and public cloud Access Policies to control traffic","title":"Overview"},{"location":"#what-we-wil-be-doing-as-part-of-this-demo","text":"Setup Kubernetes clusters on three public clouds Setup Virutal Machine on on-premise network Site-to-Site VPN to connect on-premise to public cloud Deploy Gloo Mesh Enterprise on clusters Deploy Istio on clusters Deploy Istio sidecar on VM Traffic Distribution between VM on-premise and public cloud Access Policies to control traffic","title":"What we wil be doing as part of this demo ?"},{"location":"ansible-playbooks/","text":"Kamesh Sampath date: 2021-11-21","title":"Ansible playbooks"},{"location":"clean-up/","text":"At the end of this chapter you would have, Delete the Cloud resources on Civo, AWS, GCP Delete the Vagrant VM Ensure Environment \u00b6 Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables Cloud Clean up \u00b6 make clean-up Destroy Vagrant VM \u00b6 make vm-destroy","title":"Clean Up"},{"location":"clean-up/#ensure-environment","text":"Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables","title":"Ensure Environment"},{"location":"clean-up/#cloud-clean-up","text":"make clean-up","title":"Cloud Clean up"},{"location":"clean-up/#destroy-vagrant-vm","text":"make vm-destroy","title":"Destroy Vagrant VM"},{"location":"env-setup/","text":"At the end of this chapter you would have, Two Kubernetes Clusters mgmt and cluster1 on minikube Argocd and Gitea will be installed into mgmt cluster cluster1 will act as application workload where Gloo Edge, Portal and demo applications will be installed. Demo Environment \u00b6 The following tables shows the environment to component matrix. Components mgmt cluster1 Kubernetes Kubernetes Context Name mgmt cluster1 Argocd Gitea Gloo Edge Gloo Portal Keycloak bookinfo httpbin keycloak petstore Navigate to the $DEMO_HOME , cd $DEMO_HOME Ansible Variables File \u00b6 All Ansible variables used in this demo is configured using the file vars.yml , edit it suit your settings. Variable Description Default work_dir The demo work directory {{ playbook_dir }}/work . Any file in this diectory is excluded by git. gcp_vpkubeconfig_dirn_name The kubeconfig directory {{ work_dir }}/.kube minikube_kubernetes_version The kubernetes version to use with minikube v1.21.6 minikube_home_dir The minikube home directory {{ work_dir }}/.minikube helm_version The helm.sh version to use 3.7.1 helm_secrets_plugin_version The helm secerts plugin version 3.10.0 sops_version The sops version 3.7.1 kubectl_version The kubectl version 1.21.6 gitea_tls_cert_path The self signed certified to use with gitea {{ work_dir}}/ssl/gitea-tls.crt github_template_repo GitHub Template Repo https://github.com/kameshsampath/gloo-edge-gitops-quickstart argocd_app_cleanup Delete Argocd applictions no git_target_revision The Git revision to use HEAD gloo_system_namespace The namespce to deploy Gloo Edge gloo-system gloo_portal_namespace The namespace deploy Gloo Portal gloo-portal bookinfo_enabled The kubernetes context that will be used to query Istio resources no . If ecommerce_portal_enabled is yes the bookinfo is deployed by default. bookinfo_reviews_versions The versions of bookinfo reviews v1 , v2 and v3 ecommerce_portal_enabled Deploy ecommerce demo portal application no . httpbin_enabled Deploy httpbin application no . If ecommerce_portal_enabled is yes the httpbin is deployed by default. gloo_portal_enabled Deploy Gloo portal no gloo_portal_monetization_enabled no keycloak_enabled Deploy keycloak no petstore_enabled Deploy petstore application no . If ecommerce_portal_enabled is yes the petstore is deployed by default. The minikube_profiles defines the minikube cluster(s) that will be created for the demo environment, minikube_profiles : # minikube profile name and the same will used the k8s context name for this cluster mgmt : # The create minikube create : yes # The destory minikube destroy : no # The minikube addons to configure addons : - metallb # the metallb LoadBalancer Start IP lbStartIP : 192.168.64.80 # the metallb LoadBalancer End IP lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 cluster2 : create : no destroy : no addons : - metallb lbStartIP : 192.168.64.120 lbEndIP : 192.168.64.130 For more information on the variables check the Ansible role minikube . The gloo_clusters variable by default has the following values, refer to the component matrix above to understand what this dictionary key/value represents. gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 install_istio : yes cluster_name : cluster1 enable_portal : yes Setup Kubernetes Clusters \u00b6 make clusters The task creates the kubernetes clusters configured using minikube_profiles and also downloads the compatible tools to $DEMO_HOME/bin . Add the $DEMO_HOME/bin to your path to make sure the right versions of the tools are used, export PATH = \" $DEMO_HOME /bin: $PATH \" Deploy Gitea \u00b6 As part of the demo we will use locally hosted Gite git repository, make deploy-gitea Create age key \u00b6 age-keygen -o key.txt Move the key.txt to secure place, preferably $HOME/.ssh . Assuming you moved it to $HOME/.ssh , lets set that as local environment variables for convinience: export SOPS_AGE_KEY_FILE = \" $HOME /.ssh/key.txt\" Also note and export the publickey in the $SOPS_AGE_KEY_FILE as $SOPS_AGE_RECIPIENTS export SOPS_AGE_RECIPIENTS = $( cat $SOPS_AGE_KEY_FILE | awk 'NR==2{ print $4}' ) Ensure the sops configration .sops.yml is updated with your age publickey, yq eval '.creation_rules[0].age |= strenv(SOPS_AGE_RECIPIENTS)' .sops.yml Deploy Argocd \u00b6 Argocd has to be customized to allow decrypting of secrets using the age key. The values.yaml will do extra configure overrides when deploying Argocd: does patch the Argocd\u2019s argocd-repo-server deployment to mount the secret-keys as repo-server volume. install the helm plugin and age tools and make it available as custom-tools volumes. We also need to make sure the age key is to be available to the Argocd repo server so that it can decrypt the secerts while deploying the resources via helm, kubectl create ns argocd kubectl create secret generic helm-secrets-private-keys \\ --namespace = argocd \\ --from-file = key.txt = \" $SOPS_AGE_KEY_FILE \" Now we are good deploy argocd by running the comand make deploy-argocd","title":"Environment Setup"},{"location":"env-setup/#demo-environment","text":"The following tables shows the environment to component matrix. Components mgmt cluster1 Kubernetes Kubernetes Context Name mgmt cluster1 Argocd Gitea Gloo Edge Gloo Portal Keycloak bookinfo httpbin keycloak petstore Navigate to the $DEMO_HOME , cd $DEMO_HOME","title":"Demo Environment"},{"location":"env-setup/#ansible-variables-file","text":"All Ansible variables used in this demo is configured using the file vars.yml , edit it suit your settings. Variable Description Default work_dir The demo work directory {{ playbook_dir }}/work . Any file in this diectory is excluded by git. gcp_vpkubeconfig_dirn_name The kubeconfig directory {{ work_dir }}/.kube minikube_kubernetes_version The kubernetes version to use with minikube v1.21.6 minikube_home_dir The minikube home directory {{ work_dir }}/.minikube helm_version The helm.sh version to use 3.7.1 helm_secrets_plugin_version The helm secerts plugin version 3.10.0 sops_version The sops version 3.7.1 kubectl_version The kubectl version 1.21.6 gitea_tls_cert_path The self signed certified to use with gitea {{ work_dir}}/ssl/gitea-tls.crt github_template_repo GitHub Template Repo https://github.com/kameshsampath/gloo-edge-gitops-quickstart argocd_app_cleanup Delete Argocd applictions no git_target_revision The Git revision to use HEAD gloo_system_namespace The namespce to deploy Gloo Edge gloo-system gloo_portal_namespace The namespace deploy Gloo Portal gloo-portal bookinfo_enabled The kubernetes context that will be used to query Istio resources no . If ecommerce_portal_enabled is yes the bookinfo is deployed by default. bookinfo_reviews_versions The versions of bookinfo reviews v1 , v2 and v3 ecommerce_portal_enabled Deploy ecommerce demo portal application no . httpbin_enabled Deploy httpbin application no . If ecommerce_portal_enabled is yes the httpbin is deployed by default. gloo_portal_enabled Deploy Gloo portal no gloo_portal_monetization_enabled no keycloak_enabled Deploy keycloak no petstore_enabled Deploy petstore application no . If ecommerce_portal_enabled is yes the petstore is deployed by default. The minikube_profiles defines the minikube cluster(s) that will be created for the demo environment, minikube_profiles : # minikube profile name and the same will used the k8s context name for this cluster mgmt : # The create minikube create : yes # The destory minikube destroy : no # The minikube addons to configure addons : - metallb # the metallb LoadBalancer Start IP lbStartIP : 192.168.64.80 # the metallb LoadBalancer End IP lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 cluster2 : create : no destroy : no addons : - metallb lbStartIP : 192.168.64.120 lbEndIP : 192.168.64.130 For more information on the variables check the Ansible role minikube . The gloo_clusters variable by default has the following values, refer to the component matrix above to understand what this dictionary key/value represents. gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 install_istio : yes cluster_name : cluster1 enable_portal : yes","title":"Ansible Variables File"},{"location":"env-setup/#setup-kubernetes-clusters","text":"make clusters The task creates the kubernetes clusters configured using minikube_profiles and also downloads the compatible tools to $DEMO_HOME/bin . Add the $DEMO_HOME/bin to your path to make sure the right versions of the tools are used, export PATH = \" $DEMO_HOME /bin: $PATH \"","title":"Setup Kubernetes Clusters"},{"location":"env-setup/#deploy-gitea","text":"As part of the demo we will use locally hosted Gite git repository, make deploy-gitea","title":"Deploy Gitea"},{"location":"env-setup/#create-age-key","text":"age-keygen -o key.txt Move the key.txt to secure place, preferably $HOME/.ssh . Assuming you moved it to $HOME/.ssh , lets set that as local environment variables for convinience: export SOPS_AGE_KEY_FILE = \" $HOME /.ssh/key.txt\" Also note and export the publickey in the $SOPS_AGE_KEY_FILE as $SOPS_AGE_RECIPIENTS export SOPS_AGE_RECIPIENTS = $( cat $SOPS_AGE_KEY_FILE | awk 'NR==2{ print $4}' ) Ensure the sops configration .sops.yml is updated with your age publickey, yq eval '.creation_rules[0].age |= strenv(SOPS_AGE_RECIPIENTS)' .sops.yml","title":"Create age key"},{"location":"env-setup/#deploy-argocd","text":"Argocd has to be customized to allow decrypting of secrets using the age key. The values.yaml will do extra configure overrides when deploying Argocd: does patch the Argocd\u2019s argocd-repo-server deployment to mount the secret-keys as repo-server volume. install the helm plugin and age tools and make it available as custom-tools volumes. We also need to make sure the age key is to be available to the Argocd repo server so that it can decrypt the secerts while deploying the resources via helm, kubectl create ns argocd kubectl create secret generic helm-secrets-private-keys \\ --namespace = argocd \\ --from-file = key.txt = \" $SOPS_AGE_KEY_FILE \" Now we are good deploy argocd by running the comand make deploy-argocd","title":"Deploy Argocd"},{"location":"gitops/","text":"At the end of this chapter you would have deployed Gloo Edge and Gloo Portal via Gitops with Argocd. Ensure Enviroment \u00b6 Ensure the following enviroment variables are set before proceeding further, export DEMO_HOME = \" ${ PWD } \" export DEMO_WORK_DIR = \" ${ DEMO_HOME } /work\" # GLOO export GLOO_EDGE_LICENSE_KEY = \"Your Gloo Edge Enterpise License\" export GITEA_USERANAME = \"gitea\" export GITEA_PASSWORD = $( cat \" ${ DEMO_WORK_DIR } /gitea_passwordfile\" ) export GITEA_SELFSIGNED_CA = \" $DEMO_WORK_DIR /ssl/gitea-tls.crt\" # Kubernetes context name of Gloo Mesh Cluster that will have management components installed export MGMT = mgmt export CLUSTER1 = cluster1 export CLUSTER2 = cluster2 export KUBECONFIG = \" ${ DEMO_WORK_DIR } /.kube/config\" export PATH = \" ${ DEMO_HOME } /bin: $PATH \" # as we will be using self signed certs for Gitea export GIT_SSL_NO_VERIFY = true export MINIKUBE_HOME = \" ${ DEMO_WORK_DIR } /.minikube\" export MINIKUBE_DRIVER = hyperkit export ARGOCD_VERSION = v2.1.6 export SOPS_AGE_KEY_FILE = ~/.ssh/sops_dev_key.txt export SOPS_AGE_RECIPIENTS = $( cat $SOPS_AGE_KEY_FILE | awk 'NR==2{ print $4}' ) Tip You can tools like direnv to configure and load the environment variables. Prepare Gloo Deployment \u00b6 The Gloo Licensekey is configured using helm values file $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml , Copy the $DEMO_HOME/infrastructure/gloo/edge/secrets-example.yaml to $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml cp ` $DEMO_HOME /infrastructure/gloo/edge/secrets-example.yaml ` ` $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml ` Update the Gloo Edge license key match your license key in the secrets.yaml , if you have configured the $GLOO_EDGE_LICENSE_KEY then its as simple as running, yq eval '.gloo-ee.license-key |= strenv(GLOO_EDGE_LICENSE_KEY)' $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml Now encrypt the $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml so that its safe to be pushed into the Gitea or other Git repositories that are used as part of your GitOps setup. helm secrets enc $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml Note The helm charts uses the Helm sub-chart pattern configure Gloo Helm Values. So when adding any other Gloo Helm values make sure to add below the sub chart name gloo-ee Deploy Gloo Edge \u00b6 Now run the following command: make deploy-argocd-apps Deploy Gloo Portal \u00b6 Edit the $DEMO_HOME/vars.yml to update the gloo_portal_enabled variable to yes and run the following command, make deploy-argocd-apps Tip You can also do EXTRA_VARS = \"-gloo_portal_enabled=yes\" make deploy-argocd-apps Deploy Keycloak \u00b6 The Keycloak deployment helm values are controlled using $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml and $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml Copy the $DEMO_HOME/helm_vars/keycloak/values/secrets-example.yaml to $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml cp ` $DEMO_HOME /helm_vars/keycloak/values/secrets-example.yaml ` ` $DEMO_HOME /helm_vars/keycloak/values/secrets.yaml ` Edit and update the $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml for keycloakAdminUser and keycloakAdminPassword values, Now encrypt the $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml so that its safe to be pushed into the Gitea or other Git repositories that are used as part of your GitOps setup. helm secrets enc $DEMO_HOME /helm_vars/keycloak/values/secrets.yaml Once you have created keycloak secerts, edit the $DEMO_HOME/vars.yml to update the keycloak_enabled variable to yes and run the following command, make deploy-argocd-apps","title":"Deploy Argocd Applications"},{"location":"gitops/#ensure-enviroment","text":"Ensure the following enviroment variables are set before proceeding further, export DEMO_HOME = \" ${ PWD } \" export DEMO_WORK_DIR = \" ${ DEMO_HOME } /work\" # GLOO export GLOO_EDGE_LICENSE_KEY = \"Your Gloo Edge Enterpise License\" export GITEA_USERANAME = \"gitea\" export GITEA_PASSWORD = $( cat \" ${ DEMO_WORK_DIR } /gitea_passwordfile\" ) export GITEA_SELFSIGNED_CA = \" $DEMO_WORK_DIR /ssl/gitea-tls.crt\" # Kubernetes context name of Gloo Mesh Cluster that will have management components installed export MGMT = mgmt export CLUSTER1 = cluster1 export CLUSTER2 = cluster2 export KUBECONFIG = \" ${ DEMO_WORK_DIR } /.kube/config\" export PATH = \" ${ DEMO_HOME } /bin: $PATH \" # as we will be using self signed certs for Gitea export GIT_SSL_NO_VERIFY = true export MINIKUBE_HOME = \" ${ DEMO_WORK_DIR } /.minikube\" export MINIKUBE_DRIVER = hyperkit export ARGOCD_VERSION = v2.1.6 export SOPS_AGE_KEY_FILE = ~/.ssh/sops_dev_key.txt export SOPS_AGE_RECIPIENTS = $( cat $SOPS_AGE_KEY_FILE | awk 'NR==2{ print $4}' ) Tip You can tools like direnv to configure and load the environment variables.","title":"Ensure Enviroment"},{"location":"gitops/#prepare-gloo-deployment","text":"The Gloo Licensekey is configured using helm values file $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml , Copy the $DEMO_HOME/infrastructure/gloo/edge/secrets-example.yaml to $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml cp ` $DEMO_HOME /infrastructure/gloo/edge/secrets-example.yaml ` ` $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml ` Update the Gloo Edge license key match your license key in the secrets.yaml , if you have configured the $GLOO_EDGE_LICENSE_KEY then its as simple as running, yq eval '.gloo-ee.license-key |= strenv(GLOO_EDGE_LICENSE_KEY)' $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml Now encrypt the $DEMO_HOME/infrastructure/gloo/edge/secrets.yaml so that its safe to be pushed into the Gitea or other Git repositories that are used as part of your GitOps setup. helm secrets enc $DEMO_HOME /infrastructure/gloo/edge/secrets.yaml Note The helm charts uses the Helm sub-chart pattern configure Gloo Helm Values. So when adding any other Gloo Helm values make sure to add below the sub chart name gloo-ee","title":"Prepare Gloo Deployment"},{"location":"gitops/#deploy-gloo-edge","text":"Now run the following command: make deploy-argocd-apps","title":"Deploy Gloo Edge"},{"location":"gitops/#deploy-gloo-portal","text":"Edit the $DEMO_HOME/vars.yml to update the gloo_portal_enabled variable to yes and run the following command, make deploy-argocd-apps Tip You can also do EXTRA_VARS = \"-gloo_portal_enabled=yes\" make deploy-argocd-apps","title":"Deploy Gloo Portal"},{"location":"gitops/#deploy-keycloak","text":"The Keycloak deployment helm values are controlled using $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml and $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml Copy the $DEMO_HOME/helm_vars/keycloak/values/secrets-example.yaml to $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml cp ` $DEMO_HOME /helm_vars/keycloak/values/secrets-example.yaml ` ` $DEMO_HOME /helm_vars/keycloak/values/secrets.yaml ` Edit and update the $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml for keycloakAdminUser and keycloakAdminPassword values, Now encrypt the $DEMO_HOME/helm_vars/keycloak/values/secrets.yaml so that its safe to be pushed into the Gitea or other Git repositories that are used as part of your GitOps setup. helm secrets enc $DEMO_HOME /helm_vars/keycloak/values/secrets.yaml Once you have created keycloak secerts, edit the $DEMO_HOME/vars.yml to update the keycloak_enabled variable to yes and run the following command, make deploy-argocd-apps","title":"Deploy Keycloak"},{"location":"tools-and-sources/","text":"At the end of this chapter you will have the required tools and enviroment ready for running the demo. Pre-requsites \u00b6 Download Tools \u00b6 We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows minikube brew install minikube Install Install helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Download Download jq brew install jq Install choco install yq pipx brew install pipx && pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath kubectl brew install kubectl Download choco install kubernetes-cli kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download sops brew install sops Download Install age brew install age Install Install Argocd CLI brew install argocd Install Install Hashicorp Vault Install Install Install Important You will need Gloo Edge Enterprise License Key to run the demo exercises. If you dont have one, get a trial license from solo.io . Demo Sources \u00b6 Clone the demo sources from the GitHub respository, git clone https://github.com/kameshsampath/gloo-edge-gitops-quickstart cd gloo-edge-gitops-quickstart For convinience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Navigate to the project home, cd $DEMO_HOME Ensure Poetry \u00b6 The project uses poetry to setup Python3 virtual environment to run ansible scripts. You can use pipx to install poetry like, pipx install poetry && pipx ensurepath Lets ensure poetry is setup correctly, running the following command should return the version of the installed poetry utility. poetry --version Let us configure poetry to create the python3 virutalenv in the project directory $DEMO_HOME , poetry config virtualenvs.in-project true Ansible Environment \u00b6 To create the virutal environment run the following command, make create-venv The command will instal all the required python modules in the $DEMO_HOME/.venv . Install the ansible roles and collections that will be used by the playbooks, poetry run ansible-galaxy role install -r $DEMO_HOME /requirements.yml poetry run ansible-galaxy collection install -r $DEMO_HOME /requirements.yml","title":"Tools and Sources"},{"location":"tools-and-sources/#pre-requsites","text":"","title":"Pre-requsites"},{"location":"tools-and-sources/#download-tools","text":"We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows minikube brew install minikube Install Install helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Download Download jq brew install jq Install choco install yq pipx brew install pipx && pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath kubectl brew install kubectl Download choco install kubernetes-cli kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download sops brew install sops Download Install age brew install age Install Install Argocd CLI brew install argocd Install Install Hashicorp Vault Install Install Install Important You will need Gloo Edge Enterprise License Key to run the demo exercises. If you dont have one, get a trial license from solo.io .","title":"Download Tools"},{"location":"tools-and-sources/#demo-sources","text":"Clone the demo sources from the GitHub respository, git clone https://github.com/kameshsampath/gloo-edge-gitops-quickstart cd gloo-edge-gitops-quickstart For convinience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Navigate to the project home, cd $DEMO_HOME","title":"Demo Sources"},{"location":"tools-and-sources/#ensure-poetry","text":"The project uses poetry to setup Python3 virtual environment to run ansible scripts. You can use pipx to install poetry like, pipx install poetry && pipx ensurepath Lets ensure poetry is setup correctly, running the following command should return the version of the installed poetry utility. poetry --version Let us configure poetry to create the python3 virutalenv in the project directory $DEMO_HOME , poetry config virtualenvs.in-project true","title":"Ensure Poetry"},{"location":"tools-and-sources/#ansible-environment","text":"To create the virutal environment run the following command, make create-venv The command will instal all the required python modules in the $DEMO_HOME/.venv . Install the ansible roles and collections that will be used by the playbooks, poetry run ansible-galaxy role install -r $DEMO_HOME /requirements.yml poetry run ansible-galaxy collection install -r $DEMO_HOME /requirements.yml","title":"Ansible Environment"},{"location":"troubleshooting/","text":"Tunnel Closed \u00b6 The VPN tunnel goes inactive if there is no activity, whenever you see the Tunnel is inactive say you are not able to ping the Pods, try restarting the strongswan service and initiate the connection, vagrant ssh -c \"sudo systemctl restart strongswan\" vagrant ssh -c \"sudo swanctl initiate --child=home-gcp\"","title":"Troubleshooting"},{"location":"troubleshooting/#tunnel-closed","text":"The VPN tunnel goes inactive if there is no activity, whenever you see the Tunnel is inactive say you are not able to ping the Pods, try restarting the strongswan service and initiate the connection, vagrant ssh -c \"sudo systemctl restart strongswan\" vagrant ssh -c \"sudo swanctl initiate --child=home-gcp\"","title":"Tunnel Closed"}]}