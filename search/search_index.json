{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The template repository to get started with setting Gloo Edge clusters for Development and optionally using GitOps principles to build deploy your APIs. Warning This template repository is under active development hence expect things to change quicker and faster.","title":"Overview"},{"location":"ansible/","text":"The template repository uses the following Ansible Collections and roles, Ansible Role for Minikube Ansible Collection for Gloo Ansible Collection for Kubernetes","title":"Ansible Roles"},{"location":"clean-up/","text":"At the end of this chapter you would have, Delete the minikibe resources Ensure Environment \u00b6 Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables Minikube Clean up \u00b6 make clean-up","title":"Clean Up"},{"location":"clean-up/#ensure-environment","text":"Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables","title":"Ensure Environment"},{"location":"clean-up/#minikube-clean-up","text":"make clean-up","title":"Minikube Clean up"},{"location":"env-setup/","text":"At the end of this chapter you would have, Ansible environment to run the playbooks Two Kubernetes Clusters mgmt and cluster1 on minikube Argocd and Gitea will be installed into mgmt cluster cluster1 will act as application workload with Gloo Edge and Portal, Pipelines are installed as part of the setup Ansible Environment \u00b6 To create the virutal environment run the following command, make create-venv The command will instal all the required python modules in the $DEMO_HOME/.venv . Install the ansible roles and collections that will be used by the playbooks, make install-roles-and-collections Demo Environment \u00b6 The following tables shows the environment to component matrix. Components mgmt cluster1 Kubernetes Kubernetes Context Name mgmt cluster1 Argocd Gitea Gloo Edge Gloo Portal Navigate to the $DEMO_HOME , cd $DEMO_HOME Ansible Variables File \u00b6 All Ansible variables used in this quickstart is configured using the file $DEMO_HOME/vars.yml , be sure edit them suit your settings. Variable Description Default work_dir The demo work directory {{ playbook_dir }}/work . Any file in this diectory is excluded by git. kubeconfig_dir The directory where the kubeconfig files the minikube clusters will be stored. {{ work_dir }}/.kube . Any file in this diectory is excluded by git. minikube_kubernetes_version The kubernetes version to use with minikube v1.21.6 minikube_home_dir The minikube home directory {{ work_dir }}/.minikube helm_version The helm.sh version to use 3.7.1 helm_secrets_plugin_version The helm secerts plugin version . This is just added to enable using Helm Secrets 3.10.0 sops_version The sops version. This added to be used with Helm Secrets 3.7.1 kubectl_version The kubectl version 1.21.6 gitea_tls_cert_path The self signed certified to use with gitea {{ work_dir}}/ssl/gitea-tls.crt kubernetes_spices_gitea_k8s_context The kubernetetes context where Gitea will be installed mgmt kubernetes_spices_argocd_k8s_context The kubernetetes context where Argocd will be installed mgmt kubernetes_spices_tektoncd_k8s_context The kubernetetes context where tektoncd will be installed mgmt enable_portal_monetization Enabe Portal monetization yes The minikube_profiles defines the minikube cluster(s) that will be created for the demo environment, minikube_profiles : # minikube profile name and the same will used the k8s context name for this cluster mgmt : # The create minikube create : yes # The destory minikube destroy : no # The minikube addons to configure addons : - metallb # the metallb LoadBalancer Start IP lbStartIP : 192.168.64.80 # the metallb LoadBalancer End IP lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 cluster2 : create : no destroy : no addons : - metallb lbStartIP : 192.168.64.120 lbEndIP : 192.168.64.130 For more information on the variables check the Ansible role minikube . The gloo_clusters variable by default has the following values, refer to the component matrix above to understand what this dictionary key/value represents. gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 install_istio : yes cluster_name : cluster1 enable_portal : yes Quickstart vars.yml \u00b6 # the demo work directory work_dir : \"{{ playbook_dir }}/work\" # the kubeconfig directory kubeconfig_dir : \"{{ work_dir }}/.kube\" # the kubernetes version to use with minikube minikube_kubernetes_version : v1.21.6 # the minikube home directory minikube_home_dir : \"{{ work_dir }}/.minikube\" # the helm.sh version to use helm_version : 3.7.1 # the kubectl version kubectl_version : 1.21.6 # minikube Kubernetes Clusters minikube_profiles : # cluster where management and infrastructure components are deployed # e.g. gitea, argocd mgmt : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.80 lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 # Gloo Edge Kubernetes clusters gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 cluster_name : cluster1 enable_portal : yes enable_portal_monetization : yes kubernetes_spices_argocd_k8s_context : \"mgmt\" kubernetes_spices_tektoncd_k8s_context : \"cluster1\" # Gitea kubernetes_spices_gitea_k8s_context : \"mgmt\" gitea_tls_cert_path : \"{{ work_dir}}/ssl/gitea-tls.crt\" Setup Kubernetes Clusters \u00b6 make create-kube-clusters The task creates the kubernetes clusters configured using minikube_profiles and also downloads the compatible tools to $DEMO_HOME/bin . Add the $DEMO_HOME/bin to your path to make sure the right versions of the tools are used, export PATH = \" $DEMO_HOME /bin: $PATH \" Tip When you have metallb addon enabled it will be required for you to configure the addon using minikube. As matter of convinice you can add the following tasks to the clusters playbook to make ansible do it for you ... tasks : - name : \"Configure metallb\" ansible.builtin.expect : command : \"{{ minikube_binary }} -p {{ item.key }} addons configure metallb\" responses : \"-- Enter Load Balancer Start IP:\" : \"{{ item.value.lbStartIP}}\" \"-- Enter Load Balancer End IP:\" : \"{{ item.value.lbEndIP}}\" loop : \"{{ minikube_profiles | dict2items }}\" loop_control : label : \"{{ item.key }}\" register : lb_setup_result when : item.value.create and not item.value.destroy - name : \"Metallb result\" debug : var : lb_setup_result ... Deploy Gitea \u00b6 Deploy minkube hosted Gitea git repository for working with GitOps, make deploy-gitea Deploy Argocd \u00b6 Deploy argocd for enabling continious delivery using GitOps, make deploy-argocd Deploy Pipelines \u00b6 Deploy tektoncd for enabling Kubernetes native pipelines, make deploy-pipelines Deploy Gloo Edge \u00b6 make deploy-gloo","title":"Environment Setup"},{"location":"env-setup/#ansible-environment","text":"To create the virutal environment run the following command, make create-venv The command will instal all the required python modules in the $DEMO_HOME/.venv . Install the ansible roles and collections that will be used by the playbooks, make install-roles-and-collections","title":"Ansible Environment"},{"location":"env-setup/#demo-environment","text":"The following tables shows the environment to component matrix. Components mgmt cluster1 Kubernetes Kubernetes Context Name mgmt cluster1 Argocd Gitea Gloo Edge Gloo Portal Navigate to the $DEMO_HOME , cd $DEMO_HOME","title":"Demo Environment"},{"location":"env-setup/#ansible-variables-file","text":"All Ansible variables used in this quickstart is configured using the file $DEMO_HOME/vars.yml , be sure edit them suit your settings. Variable Description Default work_dir The demo work directory {{ playbook_dir }}/work . Any file in this diectory is excluded by git. kubeconfig_dir The directory where the kubeconfig files the minikube clusters will be stored. {{ work_dir }}/.kube . Any file in this diectory is excluded by git. minikube_kubernetes_version The kubernetes version to use with minikube v1.21.6 minikube_home_dir The minikube home directory {{ work_dir }}/.minikube helm_version The helm.sh version to use 3.7.1 helm_secrets_plugin_version The helm secerts plugin version . This is just added to enable using Helm Secrets 3.10.0 sops_version The sops version. This added to be used with Helm Secrets 3.7.1 kubectl_version The kubectl version 1.21.6 gitea_tls_cert_path The self signed certified to use with gitea {{ work_dir}}/ssl/gitea-tls.crt kubernetes_spices_gitea_k8s_context The kubernetetes context where Gitea will be installed mgmt kubernetes_spices_argocd_k8s_context The kubernetetes context where Argocd will be installed mgmt kubernetes_spices_tektoncd_k8s_context The kubernetetes context where tektoncd will be installed mgmt enable_portal_monetization Enabe Portal monetization yes The minikube_profiles defines the minikube cluster(s) that will be created for the demo environment, minikube_profiles : # minikube profile name and the same will used the k8s context name for this cluster mgmt : # The create minikube create : yes # The destory minikube destroy : no # The minikube addons to configure addons : - metallb # the metallb LoadBalancer Start IP lbStartIP : 192.168.64.80 # the metallb LoadBalancer End IP lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 cluster2 : create : no destroy : no addons : - metallb lbStartIP : 192.168.64.120 lbEndIP : 192.168.64.130 For more information on the variables check the Ansible role minikube . The gloo_clusters variable by default has the following values, refer to the component matrix above to understand what this dictionary key/value represents. gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 install_istio : yes cluster_name : cluster1 enable_portal : yes","title":"Ansible Variables File"},{"location":"env-setup/#quickstart-varsyml","text":"# the demo work directory work_dir : \"{{ playbook_dir }}/work\" # the kubeconfig directory kubeconfig_dir : \"{{ work_dir }}/.kube\" # the kubernetes version to use with minikube minikube_kubernetes_version : v1.21.6 # the minikube home directory minikube_home_dir : \"{{ work_dir }}/.minikube\" # the helm.sh version to use helm_version : 3.7.1 # the kubectl version kubectl_version : 1.21.6 # minikube Kubernetes Clusters minikube_profiles : # cluster where management and infrastructure components are deployed # e.g. gitea, argocd mgmt : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.80 lbEndIP : 192.168.64.90 cluster1 : create : yes destroy : no addons : - metallb lbStartIP : 192.168.64.100 lbEndIP : 192.168.64.110 # Gloo Edge Kubernetes clusters gloo_clusters : cluster1 : cloud : minikube k8s_context : cluster1 cluster_name : cluster1 enable_portal : yes enable_portal_monetization : yes kubernetes_spices_argocd_k8s_context : \"mgmt\" kubernetes_spices_tektoncd_k8s_context : \"cluster1\" # Gitea kubernetes_spices_gitea_k8s_context : \"mgmt\" gitea_tls_cert_path : \"{{ work_dir}}/ssl/gitea-tls.crt\"","title":"Quickstart vars.yml"},{"location":"env-setup/#setup-kubernetes-clusters","text":"make create-kube-clusters The task creates the kubernetes clusters configured using minikube_profiles and also downloads the compatible tools to $DEMO_HOME/bin . Add the $DEMO_HOME/bin to your path to make sure the right versions of the tools are used, export PATH = \" $DEMO_HOME /bin: $PATH \" Tip When you have metallb addon enabled it will be required for you to configure the addon using minikube. As matter of convinice you can add the following tasks to the clusters playbook to make ansible do it for you ... tasks : - name : \"Configure metallb\" ansible.builtin.expect : command : \"{{ minikube_binary }} -p {{ item.key }} addons configure metallb\" responses : \"-- Enter Load Balancer Start IP:\" : \"{{ item.value.lbStartIP}}\" \"-- Enter Load Balancer End IP:\" : \"{{ item.value.lbEndIP}}\" loop : \"{{ minikube_profiles | dict2items }}\" loop_control : label : \"{{ item.key }}\" register : lb_setup_result when : item.value.create and not item.value.destroy - name : \"Metallb result\" debug : var : lb_setup_result ...","title":"Setup Kubernetes Clusters"},{"location":"env-setup/#deploy-gitea","text":"Deploy minkube hosted Gitea git repository for working with GitOps, make deploy-gitea","title":"Deploy Gitea"},{"location":"env-setup/#deploy-argocd","text":"Deploy argocd for enabling continious delivery using GitOps, make deploy-argocd","title":"Deploy Argocd"},{"location":"env-setup/#deploy-pipelines","text":"Deploy tektoncd for enabling Kubernetes native pipelines, make deploy-pipelines","title":"Deploy Pipelines"},{"location":"env-setup/#deploy-gloo-edge","text":"make deploy-gloo","title":"Deploy Gloo Edge"},{"location":"gitops/","text":"Here are few examples that you can try with Gitops with Gloo Edge and Portal, Gloo Edge and Portal Demo Using Secrets with Helm Helm Secrets Demo","title":"GitOps Examples"},{"location":"tools-and-sources/","text":"At the end of this chapter you will have the required tools and enviroment ready for running the demo. Pre-requsites \u00b6 Download Tools \u00b6 We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows minikube * brew install minikube Install Install helm * brew install helm Install choco install kubernetes-helm yq v4 * brew install yq Download Download jq brew install jq Install choco install yq pipx * brew install pipx && pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath kubectl * brew install kubectl Download choco install kubernetes-cli kustomize * brew install kustomize Download choco install kustomize stern brew install stern Download Download sops brew install sops Download Install age brew install age Install Install httpie Install Install Install Note Marked * are required tools You will need Gloo Edge Enterprise License Key to run the some of the advanced features of Gloo Edge. If you dont have one, get a trial license from solo.io . Quickstart Sources \u00b6 Clone the demo sources from the GitHub respository, git clone https://github.com/kameshsampath/gloo-edge-gitops-quickstart cd gloo-edge-gitops-quickstart For convinience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Navigate to the project home, cd $DEMO_HOME Ensure Poetry \u00b6 The project uses poetry to setup Python3 virtual environment to run ansible scripts. You can use pipx to install poetry like, pipx install poetry && pipx ensurepath Lets ensure poetry is setup correctly, running the following command should return the version of the installed poetry utility. poetry --version Let us configure poetry to create the python3 virutalenv in the project directory $DEMO_HOME , poetry config virtualenvs.in-project true","title":"Get Started"},{"location":"tools-and-sources/#pre-requsites","text":"","title":"Pre-requsites"},{"location":"tools-and-sources/#download-tools","text":"We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows minikube * brew install minikube Install Install helm * brew install helm Install choco install kubernetes-helm yq v4 * brew install yq Download Download jq brew install jq Install choco install yq pipx * brew install pipx && pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath python3 -m pip install --user pipx && python3 -m pipx ensurepath kubectl * brew install kubectl Download choco install kubernetes-cli kustomize * brew install kustomize Download choco install kustomize stern brew install stern Download Download sops brew install sops Download Install age brew install age Install Install httpie Install Install Install Note Marked * are required tools You will need Gloo Edge Enterprise License Key to run the some of the advanced features of Gloo Edge. If you dont have one, get a trial license from solo.io .","title":"Download Tools"},{"location":"tools-and-sources/#quickstart-sources","text":"Clone the demo sources from the GitHub respository, git clone https://github.com/kameshsampath/gloo-edge-gitops-quickstart cd gloo-edge-gitops-quickstart For convinience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Navigate to the project home, cd $DEMO_HOME","title":"Quickstart Sources"},{"location":"tools-and-sources/#ensure-poetry","text":"The project uses poetry to setup Python3 virtual environment to run ansible scripts. You can use pipx to install poetry like, pipx install poetry && pipx ensurepath Lets ensure poetry is setup correctly, running the following command should return the version of the installed poetry utility. poetry --version Let us configure poetry to create the python3 virutalenv in the project directory $DEMO_HOME , poetry config virtualenvs.in-project true","title":"Ensure Poetry"},{"location":"troubleshooting/","text":"Tunnel Closed \u00b6 The VPN tunnel goes inactive if there is no activity, whenever you see the Tunnel is inactive say you are not able to ping the Pods, try restarting the strongswan service and initiate the connection, vagrant ssh -c \"sudo systemctl restart strongswan\" vagrant ssh -c \"sudo swanctl initiate --child=home-gcp\"","title":"Troubleshooting"},{"location":"troubleshooting/#tunnel-closed","text":"The VPN tunnel goes inactive if there is no activity, whenever you see the Tunnel is inactive say you are not able to ping the Pods, try restarting the strongswan service and initiate the connection, vagrant ssh -c \"sudo systemctl restart strongswan\" vagrant ssh -c \"sudo swanctl initiate --child=home-gcp\"","title":"Tunnel Closed"}]}