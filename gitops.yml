- name: "Deploy Argocd Applications"
  hosts: all
  vars_files:
    - vars.yml
  vars:
    #owner/repo format
    git_repo_name: "gitea_admin/gloo-edge-gitops-quickstart"
    # uncomment this to point to GitHub or other url,
    # if this is not set it will use local gitea
    # gitops_repo_url: 'https://gitea-192.168.64.81.nip.io/'
    # the cluster where the target applications will be deployed
    target_cluster_context: cluster1
    # the kubernetes context where we can find Argocd deployment
    git_k8s_context: mgmt
    argocd_k8s_context: mgmt
  tasks:
    - name: "Get Argocd Server Service"
      kubernetes.core.k8s_info:
        kind: Service
        name: argocd-server
        namespace: argocd
        context: "{{ argocd_k8s_context }}"
      register: argcod_server_svc_result

    - name: "Set Argocd Service fact"
      set_fact:
        argocd_server_address: "{{ argcod_server_svc_result.resources[0].status.loadBalancer.ingress[0].ip }}"

    - name: "Query Git url"
      kubernetes.core.k8s_info:
        kind: Service
        name: gateway-proxy
        namespace: gitea
        context: "{{ git_k8s_context }}"
      register: git_service_result
      when: gitops_repo_url is not defined

    - name: "Set Git Repo Facts"
      set_fact:
        git_url: "gitea-{{ git_service_result.resources[0] | json_query(q) | first }}.nip.io"
      vars:
        q: "status.loadBalancer.ingress[*].ip"
      when: gitops_repo_url is not defined

    - name: "Retrieve Gitea password"
      ansible.builtin.slurp:
         path: "{{ work_dir }}/gitea.password"
      register: gitea_password

    - name: "Register demo git Repo"
      ansible.builtin.command:
        argv:
          - argocd
          - repo
          - add
          - "https://{{ git_url }}/{{ git_repo_name }}"
          - --username="gitea"
          - --password="{{ gitea_password['contents'] | b64decode }}"
          - --insecure
          - --insecure-skip-server-verification
          - --server={{ argocd_server_address }}
          - "{{ argocd_k8s_context }}"
      environment:
        KUBECONFIG: "{{ work_dir }}/.kube/config"
      loop_control:
        label: "{{ item.key }}"

    - name: "Generate Argocd Apps Config"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/argocd/apps-values.yaml.j2"
        dest: "{{ work_dir }}/argo-apps-values.yaml"
    - name: "Deploy Argocd Applications"
      kubernetes.core.helm:
        release_namespace: argocd
        release_name: gloo-edge-gitops-quickstart
        create_namespace: yes
        chart_ref: "{{ playbook_dir }}/charts/argocd-apps"
        values_files:
          - "{{ work_dir }}/argo-apps-values.yaml"
        context: "{{ argocd_k8s_context }}"
      when: argocd_app_cleanup is not defined or not argocd_app_cleanup

    - name: "Cleanup Argocd Applications"
      kubernetes.core.helm:
        release_namespace: argocd
        release_name: gloo-edge-gitops-quickstart
        create_namespace: yes
        chart_ref: "{{ playbook_dir }}/charts/argocd-apps"
        state: absent
        context: "{{ argocd_k8s_context }}"
      when: argocd_app_cleanup | default(false)
